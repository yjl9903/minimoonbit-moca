fn parse_minimoonbit_file(path : String) -> Syntax! {
  let parser : Parser[Syntax] = Parser(prog)
  assert_true!(@fs.path_exists(~path))
  let input : String = @fs.read_file_to_string!(~path)
  let context = @lex.Context::new(input)
  let ok = @lex.lex(context)
  assert_eq!(ok, 0)
  let (expr, rest) = parser.parse(context.tokens[:]).unwrap()
  assert_eq!(rest.length(), 0)
  return expr
}

test "spill3" {
  inspect!(
    parse_minimoonbit_file!("test/test_src/spill3.mbt"),
    content="LetRec({name: (\"f\", Int), args: [(\"x0\", Int)], body: Let((\"x1\", Var({val: None})), Prim(Var(\"x0\"), Int(1), Add, kind=None), Let((\"x2\", Var({val: None})), Prim(Var(\"x1\"), Int(1), Add, kind=None), Let((\"x3\", Var({val: None})), Prim(Var(\"x2\"), Int(1), Add, kind=None), Let((\"x4\", Var({val: None})), Prim(Var(\"x3\"), Int(1), Add, kind=None), Let((\"x5\", Var({val: None})), Prim(Var(\"x4\"), Int(1), Add, kind=None), Let((\"x6\", Var({val: None})), Prim(Var(\"x5\"), Int(1), Add, kind=None), Let((\"x7\", Var({val: None})), Prim(Var(\"x6\"), Int(1), Add, kind=None), Let((\"x8\", Var({val: None})), Prim(Var(\"x7\"), Int(1), Add, kind=None), Let((\"x9\", Var({val: None})), Prim(Var(\"x8\"), Int(1), Add, kind=None), Let((\"x10\", Var({val: None})), Prim(Var(\"x9\"), Int(1), Add, kind=None), Let((\"x11\", Var({val: None})), Prim(Var(\"x10\"), Int(1), Add, kind=None), Let((\"x12\", Var({val: None})), Prim(Var(\"x11\"), Int(1), Add, kind=None), Let((\"x13\", Var({val: None})), Prim(Var(\"x12\"), Int(1), Add, kind=None), Let((\"x14\", Var({val: None})), Prim(Var(\"x13\"), Int(1), Add, kind=None), Let((\"x15\", Var({val: None})), Prim(Var(\"x14\"), Int(1), Add, kind=None), Let((\"x16\", Var({val: None})), Prim(Var(\"x15\"), Int(1), Add, kind=None), Let((\"x17\", Var({val: None})), Prim(Var(\"x16\"), Int(1), Add, kind=None), Let((\"x18\", Var({val: None})), Prim(Var(\"x17\"), Int(1), Add, kind=None), Let((\"x19\", Var({val: None})), Prim(Var(\"x18\"), Var(\"x1\"), Add, kind=None), Let((\"x20\", Var({val: None})), Prim(Var(\"x19\"), Var(\"x2\"), Add, kind=None), Let((\"x21\", Var({val: None})), Prim(Var(\"x20\"), Var(\"x3\"), Add, kind=None), Let((\"x22\", Var({val: None})), Prim(Var(\"x21\"), Var(\"x4\"), Add, kind=None), Let((\"x23\", Var({val: None})), Prim(Var(\"x22\"), Var(\"x5\"), Add, kind=None), Let((\"x24\", Var({val: None})), Prim(Var(\"x23\"), Var(\"x6\"), Add, kind=None), Let((\"x25\", Var({val: None})), Prim(Var(\"x24\"), Var(\"x7\"), Add, kind=None), Let((\"x26\", Var({val: None})), Prim(Var(\"x25\"), Var(\"x8\"), Add, kind=None), Let((\"x27\", Var({val: None})), Prim(Var(\"x26\"), Var(\"x9\"), Add, kind=None), Let((\"x28\", Var({val: None})), Prim(Var(\"x27\"), Var(\"x10\"), Add, kind=None), Let((\"x29\", Var({val: None})), Prim(Var(\"x28\"), Var(\"x11\"), Add, kind=None), Let((\"x30\", Var({val: None})), Prim(Var(\"x29\"), Var(\"x12\"), Add, kind=None), Let((\"x31\", Var({val: None})), Prim(Var(\"x30\"), Var(\"x13\"), Add, kind=None), Let((\"x32\", Var({val: None})), Prim(Var(\"x31\"), Var(\"x14\"), Add, kind=None), Let((\"x33\", Var({val: None})), Prim(Var(\"x32\"), Var(\"x15\"), Add, kind=None), Let((\"x34\", Var({val: None})), Prim(Var(\"x33\"), Var(\"x16\"), Add, kind=None), Let((\"x35\", Var({val: None})), Prim(Var(\"x34\"), Var(\"x17\"), Add, kind=None), Let((\"x36\", Var({val: None})), Prim(Var(\"x35\"), Var(\"x0\"), Add, kind=None), Prim(Var(\"x1\"), Prim(Var(\"x2\"), Prim(Var(\"x3\"), Prim(Var(\"x4\"), Prim(Var(\"x5\"), Prim(Var(\"x6\"), Prim(Var(\"x7\"), Prim(Var(\"x8\"), Prim(Var(\"x9\"), Prim(Var(\"x10\"), Prim(Var(\"x11\"), Prim(Var(\"x12\"), Prim(Var(\"x13\"), Prim(Var(\"x14\"), Prim(Var(\"x15\"), Prim(Var(\"x16\"), Prim(Var(\"x17\"), Prim(Var(\"x18\"), Prim(Var(\"x19\"), Prim(Var(\"x20\"), Prim(Var(\"x21\"), Prim(Var(\"x22\"), Prim(Var(\"x23\"), Prim(Var(\"x24\"), Prim(Var(\"x25\"), Prim(Var(\"x26\"), Prim(Var(\"x27\"), Prim(Var(\"x28\"), Prim(Var(\"x29\"), Prim(Var(\"x30\"), Prim(Var(\"x31\"), Prim(Var(\"x32\"), Prim(Var(\"x33\"), Prim(Var(\"x34\"), Prim(Var(\"x35\"), Prim(Var(\"x36\"), Var(\"x0\"), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None), Add, kind=None)))))))))))))))))))))))))))))))))))))}, LetRec({name: (\"main\", Fun([], Unit)), args: [], body: App(Var(\"print_int\"), [App(Var(\"f\"), [Int(0)])])}, Unit))",
  )
}

test "ack" {
  inspect!(
    parse_minimoonbit_file!("test/test_src/ack.mbt"),
    content="LetRec({name: (\"ack\", Int), args: [(\"x\", Int), (\"y\", Int)], body: If(LE(Var(\"x\"), Int(0)), Prim(Var(\"y\"), Int(1), Add, kind=None), If(LE(Var(\"y\"), Int(0)), App(Var(\"ack\"), [Prim(Var(\"x\"), Int(1), Sub, kind=None), Int(1)]), App(Var(\"ack\"), [Prim(Var(\"x\"), Int(1), Sub, kind=None), App(Var(\"ack\"), [Var(\"x\"), Prim(Var(\"y\"), Int(1), Sub, kind=None)])])))}, LetRec({name: (\"main\", Fun([], Unit)), args: [], body: App(Var(\"print_int\"), [App(Var(\"ack\"), [Int(3), Int(8)])])}, Unit))",
  )
}

test "adder2" {
  inspect!(
    parse_minimoonbit_file!("test/test_src/adder2.mbt"),
    content="LetRec({name: (\"make_adder\", Fun([Int], Int)), args: [(\"x\", Int)], body: LetRec({name: (\"adder\", Int), args: [(\"y\", Int)], body: Prim(Var(\"x\"), Var(\"y\"), Add, kind=None)}, Var(\"adder\"))}, LetRec({name: (\"main\", Fun([], Unit)), args: [], body: Let((\"add2\", Var({val: None})), App(Var(\"make_adder\"), [Int(2)]), Let((\"add3\", Var({val: None})), App(Var(\"make_adder\"), [Int(3)]), App(Var(\"print_int\"), [Prim(App(Var(\"add2\"), [Int(10)]), App(Var(\"add3\"), [Int(20)]), Add, kind=None)])))}, Unit))",
  )
}

test {
  inspect!(
    parse_minimoonbit_file!("test/test_src/cls-bug.mbt"),
    content="LetRec({name: (\"f\", Int), args: [(\"x\", Int)], body: Prim(Var(\"x\"), Int(123), Add, kind=None)}, LetRec({name: (\"g\", Fun([Int], Int)), args: [(\"y\", Int)], body: Var(\"f\")}, LetRec({name: (\"main\", Fun([], Unit)), args: [], body: App(Var(\"print_int\"), [App(App(Var(\"g\"), [Int(456)]), [Int(789)])])}, Unit)))",
  )
}

test {
  inspect!(
    parse_minimoonbit_file!("test/test_src/matmul-flat.mbt"),
    content="LetRec({name: (\"loop3\", Unit), args: [(\"i\", Int), (\"j\", Int), (\"k\", Int), (\"a\", Array(Array(Double))), (\"b\", Array(Array(Double))), (\"c\", Array(Array(Double)))], body: If(LE(Int(0), Var(\"k\")), Put(Get(Get(Var(\"c\"), Var(\"i\")), Var(\"j\")), Prim(Get(Get(Var(\"c\"), Var(\"i\")), Var(\"j\")), Prim(Get(Get(Var(\"a\"), Var(\"i\")), Var(\"k\")), Get(Get(Var(\"b\"), Var(\"k\")), Var(\"j\")), Mul, kind=None), Add, kind=None), App(Var(\"loop3\"), [Var(\"i\"), Var(\"j\"), Prim(Var(\"k\"), Int(1), Sub, kind=None), Var(\"a\"), Var(\"b\"), Var(\"c\")])), Unit)}, LetRec({name: (\"loop2\", Unit), args: [(\"i\", Int), (\"m\", Int), (\"j\", Int), (\"a\", Array(Array(Double))), (\"b\", Array(Array(Double))), (\"c\", Array(Array(Double)))], body: If(LE(Int(0), Var(\"j\")), Let((\"_\", Var({val: None})), App(Var(\"loop3\"), [Var(\"i\"), Var(\"j\"), Prim(Var(\"m\"), Int(1), Sub, kind=None), Var(\"a\"), Var(\"b\"), Var(\"c\")]), App(Var(\"loop2\"), [Var(\"i\"), Var(\"m\"), Prim(Var(\"j\"), Int(1), Sub, kind=None), Var(\"a\"), Var(\"b\"), Var(\"c\")])), Unit)}, LetRec({name: (\"loop1\", Unit), args: [(\"i\", Int), (\"m\", Int), (\"n\", Int), (\"a\", Array(Array(Double))), (\"b\", Array(Array(Double))), (\"c\", Array(Array(Double)))], body: If(LE(Int(0), Var(\"i\")), Let((\"_\", Var({val: None})), App(Var(\"loop2\"), [Var(\"i\"), Var(\"m\"), Prim(Var(\"n\"), Int(1), Sub, kind=None), Var(\"a\"), Var(\"b\"), Var(\"c\")]), App(Var(\"loop1\"), [Prim(Var(\"i\"), Int(1), Sub, kind=None), Var(\"m\"), Var(\"n\"), Var(\"a\"), Var(\"b\"), Var(\"c\")])), Unit)}, LetRec({name: (\"mul\", Unit), args: [(\"l\", Int), (\"m\", Int), (\"n\", Int), (\"a\", Array(Array(Double))), (\"b\", Array(Array(Double))), (\"c\", Array(Array(Double)))], body: Let((\"_\", Var({val: None})), App(Var(\"loop1\"), [Prim(Var(\"l\"), Int(1), Sub, kind=None), Var(\"m\"), Var(\"n\"), Var(\"a\"), Var(\"b\"), Var(\"c\")]), Unit)}, LetRec({name: (\"main\", Fun([], Unit)), args: [], body: Let((\"dummy\", Var({val: None})), Array(Int(0), Double(0)), LetRec({name: (\"init_arr\", Unit), args: [(\"i\", Int), (\"n\", Int), (\"mat\", Array(Array(Double)))], body: If(LE(Int(0), Var(\"i\")), Put(Get(Var(\"mat\"), Var(\"i\")), Array(Var(\"n\"), Double(0)), App(Var(\"init_arr\"), [Prim(Var(\"i\"), Int(1), Sub, kind=None), Var(\"n\"), Var(\"mat\")])), Unit)}, LetRec({name: (\"make_arr\", Array(Array(Double))), args: [(\"m\", Int), (\"n\", Int), (\"dummy\", Array(Double))], body: Let((\"mat\", Var({val: None})), Array(Var(\"m\"), Var(\"dummy\")), Let((\"_\", Var({val: None})), App(Var(\"init_arr\"), [Prim(Var(\"m\"), Int(1), Sub, kind=None), Var(\"n\"), Var(\"mat\")]), Var(\"mat\")))}, Let((\"a\", Var({val: None})), App(Var(\"make_arr\"), [Int(2), Int(3), Var(\"dummy\")]), Let((\"b\", Var({val: None})), App(Var(\"make_arr\"), [Int(3), Int(2), Var(\"dummy\")]), Let((\"c\", Var({val: None})), App(Var(\"make_arr\"), [Int(2), Int(2), Var(\"dummy\")]), Put(Get(Get(Var(\"a\"), Int(0)), Int(0)), Double(1), Put(Get(Get(Var(\"a\"), Int(0)), Int(1)), Double(2), Put(Get(Get(Var(\"a\"), Int(0)), Int(2)), Double(3), Put(Get(Get(Var(\"a\"), Int(1)), Int(0)), Double(4), Put(Get(Get(Var(\"a\"), Int(1)), Int(1)), Double(5), Put(Get(Get(Var(\"a\"), Int(1)), Int(2)), Double(6), Put(Get(Get(Var(\"b\"), Int(0)), Int(0)), Double(7), Put(Get(Get(Var(\"b\"), Int(0)), Int(1)), Double(8), Put(Get(Get(Var(\"b\"), Int(1)), Int(0)), Double(9), Put(Get(Get(Var(\"b\"), Int(1)), Int(1)), Double(10), Put(Get(Get(Var(\"b\"), Int(2)), Int(0)), Double(11), Put(Get(Get(Var(\"b\"), Int(2)), Int(1)), Double(12), Let((\"_\", Var({val: None})), App(Var(\"mul\"), [Int(2), Int(3), Int(2), Var(\"a\"), Var(\"b\"), Var(\"c\")]), Let((\"_\", Var({val: None})), App(Var(\"print_int\"), [App(Var(\"truncate\"), [Get(Get(Var(\"c\"), Int(0)), Int(0))])]), Let((\"_\", Var({val: None})), App(Var(\"print_endline\"), []), Let((\"_\", Var({val: None})), App(Var(\"print_int\"), [App(Var(\"truncate\"), [Get(Get(Var(\"c\"), Int(0)), Int(1))])]), Let((\"_\", Var({val: None})), App(Var(\"print_endline\"), []), Let((\"_\", Var({val: None})), App(Var(\"print_int\"), [App(Var(\"truncate\"), [Get(Get(Var(\"c\"), Int(1)), Int(0))])]), Let((\"_\", Var({val: None})), App(Var(\"print_endline\"), []), Let((\"_\", Var({val: None})), App(Var(\"print_int\"), [App(Var(\"truncate\"), [Get(Get(Var(\"c\"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit)))))",
  )
}

test {
  inspect!(
    parse_minimoonbit_file!("test/test_src/matmul.mbt"),
    content="LetRec({name: (\"matmul\", Unit), args: [(\"l\", Int), (\"m\", Int), (\"n\", Int), (\"a\", Array(Array(Double))), (\"b\", Array(Array(Double))), (\"c\", Array(Array(Double)))], body: LetRec({name: (\"loop1\", Unit), args: [(\"i\", Int)], body: If(LE(Int(0), Var(\"i\")), LetRec({name: (\"loop2\", Unit), args: [(\"j\", Int)], body: If(LE(Int(0), Var(\"j\")), LetRec({name: (\"loop3\", Unit), args: [(\"k\", Int)], body: If(LE(Int(0), Var(\"k\")), Put(Get(Get(Var(\"c\"), Var(\"i\")), Var(\"j\")), Prim(Get(Get(Var(\"c\"), Var(\"i\")), Var(\"j\")), Prim(Get(Get(Var(\"a\"), Var(\"i\")), Var(\"k\")), Get(Get(Var(\"b\"), Var(\"k\")), Var(\"j\")), Mul, kind=None), Add, kind=None), App(Var(\"loop3\"), [Prim(Var(\"k\"), Int(1), Sub, kind=None)])), Unit)}, Let((\"_\", Var({val: None})), App(Var(\"loop3\"), [Prim(Var(\"m\"), Int(1), Sub, kind=None)]), App(Var(\"loop2\"), [Prim(Var(\"j\"), Int(1), Sub, kind=None)]))), Unit)}, Let((\"_\", Var({val: None})), App(Var(\"loop2\"), [Prim(Var(\"n\"), Int(1), Sub, kind=None)]), App(Var(\"loop1\"), [Prim(Var(\"i\"), Int(1), Sub, kind=None)]))), Unit)}, App(Var(\"loop1\"), [Prim(Var(\"l\"), Int(1), Sub, kind=None)]))}, LetRec({name: (\"main\", Fun([], Unit)), args: [], body: Let((\"dummy\", Var({val: None})), Array(Int(0), Double(0)), LetRec({name: (\"gen_arr\", Array(Array(Double))), args: [(\"m\", Int), (\"n\", Int)], body: Let((\"mat\", Var({val: None})), Array(Var(\"m\"), Var(\"dummy\")), LetRec({name: (\"init_arr\", Unit), args: [(\"i\", Int)], body: If(LE(Int(0), Var(\"i\")), Put(Get(Var(\"mat\"), Var(\"i\")), Array(Var(\"n\"), Double(0)), App(Var(\"init_arr\"), [Prim(Var(\"i\"), Int(1), Sub, kind=None)])), Unit)}, Let((\"_\", Var({val: None})), App(Var(\"init_arr\"), [Prim(Var(\"m\"), Int(1), Sub, kind=None)]), Var(\"mat\"))))}, Let((\"a\", Var({val: None})), App(Var(\"gen_arr\"), [Int(2), Int(3)]), Let((\"b\", Var({val: None})), App(Var(\"gen_arr\"), [Int(3), Int(2)]), Let((\"c\", Var({val: None})), App(Var(\"gen_arr\"), [Int(2), Int(2)]), Put(Get(Get(Var(\"a\"), Int(0)), Int(0)), Double(1), Put(Get(Get(Var(\"a\"), Int(0)), Int(1)), Double(2), Put(Get(Get(Var(\"a\"), Int(0)), Int(2)), Double(3), Put(Get(Get(Var(\"a\"), Int(1)), Int(0)), Double(4), Put(Get(Get(Var(\"a\"), Int(1)), Int(1)), Double(5), Put(Get(Get(Var(\"a\"), Int(1)), Int(2)), Double(6), Put(Get(Get(Var(\"b\"), Int(0)), Int(0)), Double(7), Put(Get(Get(Var(\"b\"), Int(0)), Int(1)), Double(8), Put(Get(Get(Var(\"b\"), Int(1)), Int(0)), Double(9), Put(Get(Get(Var(\"b\"), Int(1)), Int(1)), Double(10), Put(Get(Get(Var(\"b\"), Int(2)), Int(0)), Double(11), Put(Get(Get(Var(\"b\"), Int(2)), Int(1)), Double(12), Let((\"_\", Var({val: None})), App(Var(\"matmul\"), [Int(2), Int(3), Int(2), Var(\"a\"), Var(\"b\"), Var(\"c\")]), Let((\"_\", Var({val: None})), App(Var(\"print_int\"), [App(Var(\"truncate\"), [Get(Get(Var(\"c\"), Int(0)), Int(0))])]), Let((\"_\", Var({val: None})), App(Var(\"print_endline\"), []), Let((\"_\", Var({val: None})), App(Var(\"print_int\"), [App(Var(\"truncate\"), [Get(Get(Var(\"c\"), Int(0)), Int(1))])]), Let((\"_\", Var({val: None})), App(Var(\"print_endline\"), []), Let((\"_\", Var({val: None})), App(Var(\"print_int\"), [App(Var(\"truncate\"), [Get(Get(Var(\"c\"), Int(1)), Int(0))])]), Let((\"_\", Var({val: None})), App(Var(\"print_endline\"), []), Let((\"_\", Var({val: None})), App(Var(\"print_int\"), [App(Var(\"truncate\"), [Get(Get(Var(\"c\"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))}, Unit))",
  )
}

test {
  inspect!(
    parse_minimoonbit_file!("test/test_src/join-stack3.mbt"),
    content="LetRec({name: (\"f\", Int), args: [(\"u\", Unit)], body: Int(123)}, LetRec({name: (\"g\", Int), args: [(\"u\", Unit)], body: Int(456)}, LetRec({name: (\"h\", Int), args: [(\"u\", Unit)], body: Int(789)}, LetRec({name: (\"main\", Fun([], Unit)), args: [], body: Let((\"x\", Var({val: None})), App(Var(\"f\"), [Unit]), App(Var(\"print_int\"), [Prim(If(LE(Var(\"x\"), Int(0)), App(Var(\"g\"), [Unit]), App(Var(\"h\"), [Unit])), Var(\"x\"), Add, kind=None)]))}, Unit))))",
  )
}


test {
  let parser : Parser[Syntax] = Parser(get_or_apply_level_expr)
  
  let input : String = "f(g(456))(789)"
  let context = @lex.Context::new(input)
  let ok = @lex.lex(context)
  let (expr, rest) = parser.parse(context.tokens[:]).unwrap()
  println(expr)
  assert_eq!(rest.length(), 0)
}