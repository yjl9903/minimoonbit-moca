
// ===== necessary include =====

// ' '
fn print_space() -> Unit {
  print_char(32)
};

// '\n'
fn println() -> Unit {
  print_char(10)
};

// '['
fn __print_colon() -> Unit {
  print_char(58)
};

// '['
fn __printlb() -> Unit {
  print_char(91)
};

// ']'
fn __printrb() -> Unit {
  print_char(93)
};

// ']'
fn __printrb() -> Unit {
  print_char(93)
};

// ','
fn __print_comma() -> Unit {
  print_char(44)
};

// ==========
// ==========


// ===== option function =====

fn print_A(x: Int) -> Unit {
  let _ = print_char(65);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_B(x: Int) -> Unit {
  let _ = print_char(66);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_C(x: Int) -> Unit {
  let _ = print_char(67);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_D(x: Int) -> Unit {
  let _ = print_char(68);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_E(x: Int) -> Unit {
  let _ = print_char(69);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_F(x: Int) -> Unit {
  let _ = print_char(70);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_G(x: Int) -> Unit {
  let _ = print_char(71);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_H(x: Int) -> Unit {
  let _ = print_char(72);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_I(x: Int) -> Unit {
  let _ = print_char(73);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_J(x: Int) -> Unit {
  let _ = print_char(74);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_K(x: Int) -> Unit {
  let _ = print_char(75);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_L(x: Int) -> Unit {
  let _ = print_char(76);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_M(x: Int) -> Unit {
  let _ = print_char(77);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_N(x: Int) -> Unit {
  let _ = print_char(78);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_O(x: Int) -> Unit {
  let _ = print_char(79);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_P(x: Int) -> Unit {
  let _ = print_char(80);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_Q(x: Int) -> Unit {
  let _ = print_char(81);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_R(x: Int) -> Unit {
  let _ = print_char(82);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_S(x: Int) -> Unit {
  let _ = print_char(83);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_T(x: Int) -> Unit {
  let _ = print_char(84);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_U(x: Int) -> Unit {
  let _ = print_char(85);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_V(x: Int) -> Unit {
  let _ = print_char(86);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_W(x: Int) -> Unit {
  let _ = print_char(87);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_X(x: Int) -> Unit {
  let _ = print_char(88);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_Y(x: Int) -> Unit {
  let _ = print_char(89);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_Z(x: Int) -> Unit {
  let _ = print_char(90);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};

fn print_a(x: Int) -> Unit {
  let _ = print_char(97);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_b(x: Int) -> Unit {
  let _ = print_char(98);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_c(x: Int) -> Unit {
  let _ = print_char(99);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_d(x: Int) -> Unit {
  let _ = print_char(100);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_e(x: Int) -> Unit {
  let _ = print_char(101);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_f(x: Int) -> Unit {
  let _ = print_char(102);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_g(x: Int) -> Unit {
  let _ = print_char(103);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_h(x: Int) -> Unit {
  let _ = print_char(104);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_i(x: Int) -> Unit {
  let _ = print_char(105);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_j(x: Int) -> Unit {
  let _ = print_char(106);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_k(x: Int) -> Unit {
  let _ = print_char(107);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_l(x: Int) -> Unit {
  let _ = print_char(108);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_m(x: Int) -> Unit {
  let _ = print_char(109);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_n(x: Int) -> Unit {
  let _ = print_char(110);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_o(x: Int) -> Unit {
  let _ = print_char(111);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_p(x: Int) -> Unit {
  let _ = print_char(112);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_q(x: Int) -> Unit {
  let _ = print_char(113);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_r(x: Int) -> Unit {
  let _ = print_char(114);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_s(x: Int) -> Unit {
  let _ = print_char(115);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_t(x: Int) -> Unit {
  let _ = print_char(116);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_u(x: Int) -> Unit {
  let _ = print_char(117);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_v(x: Int) -> Unit {
  let _ = print_char(118);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_w(x: Int) -> Unit {
  let _ = print_char(119);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_x(x: Int) -> Unit {
  let _ = print_char(120);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_y(x: Int) -> Unit {
  let _ = print_char(121);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};
fn print_z(x: Int) -> Unit {
  let _ = print_char(122);
  let _ = __print_colon();
  let _ = print_space();
  let _ = print_int(x);
  print_space()
};

fn print_array_1d(arr: Array[Int], n: Int) -> Unit {
  fn show(cur: Int) -> Unit {
    if cur <= n - 1 {
      let _ = if cur == n - 1 {
        let _ = print_int(arr[cur]);
        ()
      } else {
        let _ = print_int(arr[cur]);
        let _ = __print_comma();
        let _ = print_space();
        ()
      };
      show(cur + 1)
    }
  };
  let _ = __printlb();
  let _ = show(0);
  let _ = __printrb();
  ()
};

fn print_array_2d(arr: Array[Array[Int]], n: Int, m: Int) -> Unit {
  fn show(cur: Int) -> Unit {
    if cur <= n - 1 {
      let _ = if cur == n - 1 {
        let _ = print_array_1d(arr[cur], m);
        ()
      } else {
        let _ = print_array_1d(arr[cur], m);
        let _ = __print_comma();
        let _ = print_space();
        println()
      };
      show(cur + 1)
    }
  };
  let _ = __printlb();
  let _ = show(0);
  let _ = __printrb();
  ()
};

// ==========
// ==========

